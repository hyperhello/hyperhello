/* (c) 2020 by Hypervariety Custom Programming. All rights reserved. */

:root {
	--version: "v0.1.8";
	--testbed:;
	--border-color: black;
	--background-color: white;
	--text-color: black;
	--screen-color: white;
	--current-color: var(--text-color);
	--toolbar-color: var(--background-color); /*rgb(245,245,245);*/
	--toolbar-glass-color: rgb(225,225,225);
	--toolbar-padding: 12px;
	--toolbar-border-color: var(--toolbar-glass-color);
	--toolbar-pushed-shadow: inset 1px 1px 1px gray;
	--red: rgb(194,0,0); 
	--orange: rgb(175,102,4); 
	--yellow: rgb(255,221,87); 
	--green: rgb(26,188,156); 
	--blue: rgb(22,125,240); 
	--purple: rgb(121,87,213); 
}
@media(prefers-color-scheme: dark) 
{ 
	:root {
		--dark-mode: true;
		--border-color: gray;
		--background-color: black;
		--screen-color: black;
		--text-color: #DDD;
		x--toolbar-color: #222;
		--toolbar-glass-color: rgb(100,100,100);
		--toolbar-border-color: transparent;
		--toolbar-pushed-shadow: inset 1px 1px 1px black;
	}
	.darkfilter { 
		--darkfilter: invert(85%);
		filter: var(--darkfilter); 
	} 
}
@media print { 
	
	body,html { box-shadow: none !important; overflow: visible !important; }
	#version, #contentareacursor, #contentareaants, .toolbar_tr { display: none !important; }
	body, #maintable, #contentarea, #contentareainner { position: static !important; height: auto !important; width: auto !important; }
	#contentareainner { padding-bottom: 0px !important; }
	#contentareagutter { margin: 0px !important; }
	#contentareafile { border: none !important; margin: 0px !important; }
	#contenttr { border-top: none !important; }
	#contentarea { 
		box-sizing: border-box;
		background: none !important; 
		background-image: none !important; 
		background-size: none !important; 
		border: none !important; 
		font-size: larger;
	}
}
@media screen and (max-width: 420px) {
	:root {
		--toolbar-padding: 10px;
	}
}

#type #textdetails { display: none; }

@media screen and (min-width: 600px) {	/* hide the second row assembly when the screen is wide enough show #textdetails instead of #texttr  */
	#type #textdetails { display: initial; }
	#texttr { display: none; }
}

html {
	min-height: 100%; 
}
body {
	display: flex; 
	flex-direction: column;
	width: 100%;
	backface-visibility: hidden;
	min-height: 100%; 
	margin: 0px; 
	padding: 0px;
	font-family: system-ui; 
	color: var(--text-color);
	background: var(--background-color);
}

#maintable {
	border-spacing: 0;
	border-collapse: collapse;
	min-height: 100vh;
}


/* Body setup and mixins */
[contenteditable], [contentEditable] { 	/* there are two common variations of capitalization, so support both */
	/* i like the outline, maybe we should allow it, but we have to turn off hover outline */
	outline: none; 
}
body, .selectionshield {
	-webkit-user-select: none; 
	-moz-user-select: -moz-none; 
	-ms-user-select: none; 
	user-select: none;
	/*xletter-spacing: 0px;
	x-webkit-font-kerning: none !important;
	xfont-size: 125%;
	xletter-spacing: 0.05em;
	x-webkit-font-smoothing: subpixel-antialiased;
	x-webkit-font-feature-settings: "kern" 0;*/
}
.absolutefill {
	position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px; height: 100%; width: 100%;
	box-sizing: border-box;
}
.absolutecorner {
	position: absolute; left: 0px; top: 0px; box-sizing: border-box;
}
.after_content:after {
	content: attr(data-after-content);
}
.bold { font-weight: bold; }
.italic { font-style: italic; }
.underline { text-decoration: underline; }
img.heightone { 
	height: 1em; 
	vertical-align: baseline;
	}
img.heightonepointtwo { 
	height: 1.2em; 
	vertical-align: baseline;
	}
img.heightonepointfive { 
	height: 1.5em; 
	vertical-align: baseline;
	}

body[data-hh-tool=user] #contentarea,
[contenteditable=true]:not(.selectionshield), [contentEditable=true]:not(.selectionshield), 
[contenteditable=plaintext-only]:not(.selectionshield), [contentEditable=plaintext-only]:not(.selectionshield) { 
	-webkit-user-select: auto; 
	-moz-user-select: text; 
	-ms-user-select: text; 
	user-select: auto;
}

#floating_footer { 
	position: fixed; 
	bottom: 0px; 
	left: 0px; 
	right: 0px; 
	top: 0px; 
	padding: 0px; 
	pointer-events: none; x
	border: thick solid red; 
	box-sizing: border-box; 
	transform-origin: left top; 
	xbackface-visibility: hidden; 
	z-index: 2; 
}
#floating_footer #bottom_table tr > * { 
	pointer-events: auto; 
}
#cookie_message > td > div {
	background: var(--background-color); 
	box-shadow: 1px 1px 3px var(--toolbar-glass-color);
	border: 1px solid var(--toolbar-glass-color); 
	padding: min(0.5em,1.5vw) ; 
	border-radius: 0.5em; 
	margin: 2px;
}
body.hh_dirty #cookie_message > td> div { 
	background: var(--toolbar-glass-color); 
}
/* Version placard */
#version { 
	position: absolute; 
	right: 0.25em; 
	bottom: calc(100% + 0.1em); 
	text-align: right;
	xz-index: 99;
	font-size: smaller;
	color:var(--toolbar-glass-color); 
	white-space: pre-wrap; 
	pointer-events: none;
	font-weight: bold;
	}
#version:empty:after {
	content: var(--testbed) " " var(--version);
}


/*this is a fix for a webkit bug that makes text jump as user-select changes. It seems to happen because of kerning mistakes affecting floats. I suspect one routine uses one symbol and one the other and creates a subpixel mismatch. Seems to be fixed as of now */
/*#contentareagutter { -webkit-font-kerning: normal; } x#contentareainner { font-feature-settings: "kern" 1; }*/

/* this bug affects ios14 safari dark mode; for some reason the table forgets the color when it first loads */
#contentarea { color: var(--text-color); }


/* Paint cursor */
#contentareacursor {
	z-index: 9;
	position: fixed; 
	left: 20px; 
	top: 20px; 
	width: 32px; 
	height: 20px; 
	pointer-events: none;
}
#contentareacursor.hidden {
	display: none;
}
#contentareacursor_dot {
	stroke-width: 1; 
	stroke: var(--toolbar-glass-color); 
	fill: var(--current-color);
}
#contentareapaintoverlay {
	position: fixed; 
	background: var(--background-color); 
	border-left: 1px dashed var(--current-color);
	xbox-shadow: -1px 0px 4px var(--toolbar-glass-color);
	top: 0px; bottom: 0px;
	left: 95px; right: 0px; xheight: 100vh; 
	opacity: 0.0; 
	visibility: hidden;
	pointer-events: none;
	touch-action: none;
	transition: opacity 0.25s, visibility 0.0s 0.25s;
	z-index: 1;
	cursor: none;
}

/* Toolbar */
#toolbarth
{
	margin: 0px; 
	padding: 0px; 
	font-weight: normal; 
	position: sticky; 
	top: 0px; 
	width: 100%;
	background: var(--toolbar-color); 
	z-index: 9; 
	transform-origin: left top;
}
#toolbarth > table
{
	margin: 0px; 
	border-spacing: 0; 
	border-collapse: collapse; 
	border-bottom: 1px solid var(--toolbar-glass-color);
}
#toolbarth > table > tbody > tr > td { 
	padding-top: 5px; 
	padding-bottom: 5px; 
}

#toolbartr { 
	text-align: center; 
	}
.toolbar_tr {
	z-index: 999; 
	background: var(--toolbar-color); 
	white-space: nowrap;
}
.toolbar_tr table tr td { 
	position: relative; 
	padding: 2px var(--toolbar-padding) 3px var(--toolbar-padding);
	box-sizing: border-box;
	}
.toolbar_tr img { pointer-events: none;  }
.toolbar_tr .toolbar_button { 
	min-height: 2em;
	padding: 1px 6px 1px 6px;
	border: 1px solid var(--toolbar-border-color); 
	xbox-shadow: 1px 1px 1px var(--toolbar-border-color); 
	border-radius: 0.75em; 
	background: var(--background-color); 
	color: var(--text-color); 
	cursor: default; 
	text-align: center; 
	-webkit-tap-highlight-color: transparent;	
	}
.toolbar_tr .toolbar_button[disabled],  
.toolbar_tr .toolbar_button.disabled { 
	box-shadow: none;
	color: gray;
	border-color: transparent; 
}
.toolbar_tr .toolbar_button[disabled] > *, 
.toolbar_tr .toolbar_button.disabled > * { 
	opacity: 0.5;
}
#contenttr {
	xborder-top: 1px solid var(--toolbar-glass-color); 
}
.toolbar_tr .toolbar_button:not([disabled]):not(.disabled):active {
	xbox-shadow: var(--toolbar-pushed-shadow);
	background: var(--toolbar-glass-color); 
	border: 1px solid var(--toolbar-glass-color); 
}
.toolbar_tr .toolbar_button.hilite { 
	background: var(--toolbar-glass-color); 
	border: 1px solid var(--toolbar-color); 
}
/* needs a hilite class to show text attributes */

#contentareafile {
	box-sizing: border-box; 
	border: 1px solid transparent; 
	min-height: 100%;
	height: 100%;
}


body #toolbartr #reload,
body #toolbartr #back {
	display: none;
}

/* text part of the toolbar */
#texttoolbardiv { 
	transition: max-height 0.25s;
	max-height: 40px;
}
#texttoolbardiv button { 
	font-size: 0.75em; 
}
#toolbartr #dec_back { 
	display: none; 	/* show back only when it's in second slim toolbar */
} 

/*body:not(.show_text_tr) #texttoolbardiv {
	max-height: 0px;
}*/

button#dec_delete {
	margin: 0px; 
	background: transparent; 
	padding: 0px; 
	vertical-align: middle; 
	box-shadow: none; 
	border: none;
}
#user { xwidth: 4em; xborder-right: thin solid var(--toolbar-glass-color); xborder-bottom: thin solid var(--toolbar-glass-color); }
#burger { xwidth: 3em; xborder-left: thin solid var(--toolbar-glass-color);  xborder-bottom: thin solid var(--toolbar-glass-color); }

#type { cursor: text; }
#paint, #paint * { cursor: default; }
body[data-hh-tool="paint"] #paint, body[data-hh-tool="paint"] #paint *, body[data-hh-tool="paint"] #swatch { cursor: none !important; }
#user { cursor: pointer; }

#user, #type, #paint, #burger {
	/* intended to be animated when menu is undisplayed. but dark mode switch also makes this happen */
}

body[data-hh-tool="user"] #toolbartr #user,
body[data-hh-tool="type"] #toolbartr #type,
/*body[data-hh-tool="type"] #toolbartr #swatch,
body[data-hh-tool="paint"] #toolbartr #swatch,*/
body[data-hh-tool="paint"] #toolbartr #paint  { 
	background-color: var(--toolbar-glass-color);
	/*background-image: linear-gradient(to bottom , var(--toolbar-color) , var(--toolbar-color) , var(--toolbar-glass-color));*/
	transition: background 0s;
}

#swatch { width: 100%; padding-left: 6px; padding-right: 4px;  }

.hh_canvas_swatch {
	position: relative; 
	box-shadow: 0px 0px 2px gray; 
	display: block; 
	background-image: linear-gradient(to right, var(--red) , var(--orange) , var(--yellow), var(--green), var(--purple), var(--blue), gray);
	width: calc(100%);
	margin-left: 0px;
	height: 1.5em;
	border-radius: 3px/6px;
	opacity: 0.25;
	pointer-events: none;
}

.hh_paint_stripe, .hh_paint_stripe_if_paint_tool, .hh_paint_stripe_if_type_tool {
 	background: var(--current-color); 
	position: absolute; left: 0px; right: 0px; bottom: -1px; height: 2px; 
	display: none;
	transition: height 0.15s ease-out;
}
body .hh_paint_stripe, 
body[data-hh-tool=paint] .hh_paint_stripe_if_paint_tool, 
body[data-hh-tool=type] .hh_paint_stripe_if_type_tool {
 	display: initial;
}
body.hh_canvas_swatch_active .hh_paint_stripe, 
body[data-hh-tool=paint].hh_canvas_swatch_active .hh_paint_stripe_if_paint_tool,
body[data-hh-tool=type].hh_canvas_swatch_active .hh_paint_stripe_if_type_tool {
	height: 100%;
	transition: height 0.15s ease-in 0.15s;
}
body[data-hh-tool=type] .hh_canvas_swatch, body[data-hh-tool=paint] .hh_canvas_swatch {
	opacity: 1;
	pointer-events: auto;
}

/* Undo menu */
#undo > .toolbar_button
{
	border-radius: 2em; 
	border: none;
}
#hh_undo_counter
{
	pointer-events: none; 
	opacity: 0.0; 
	position: absolute; 
	right: 0px; 
	top: 0px;
	font-size: xx-small;
}
#hh_undo_counter:focus
{
	background: red;
}

body.hh_loggedin #account img {
	xfilter: drop-shadow(0px 0px 4px var(--blue));
}

body:not(.hh_loggedin) #upload {
	display: none;
}
#upload img {
	filter: var(--darkfilter) opacity(0.5);
}
body.hh_dirty #upload img {
	filter: var(--darkfilter) drop-shadow(0px 0px 4px var(--blue));
}


/* Hamburger menu */
#burger_menu {
	display: none;	
	cursor: default;
	text-align: left;
	position: absolute; 
	padding: 0px;
	right: 0px; 
	top: calc(100% - 2px); 
	border-radius: 6px 0px 6px 6px ;
	xbox-shadow: inset 1px -1px 2px var(--toolbar-glass-color);
	border: 1px solid var(--toolbar-glass-color);
	box-shadow: -1px 1px 4px var(--toolbar-glass-color);
	z-index:999; 
	background:var(--toolbar-color); 
	-webkit-tap-highlight-color: transparent;
	xopacity: 0.98;
	max-width: 100vw;
	/* these are no longer really needed because the menu is small */
	/*min-width: 100%; 
	min-width: calc(100% + 1.5px); */
}
#burger_menu .burger_menu_top_row td {
	padding-top: 8px;
}

/* on the left? */
#burger.left_experiment #burger_menu {
	right: initial; 
	left: 0px;
	box-shadow: inset -1px -1px 2px var(--toolbar-glass-color);
}
#burger.left_experiment.display {
	background: var(--toolbar-glass-color);
}

/* these are so fucking annoying */

/*#burger #burger_menu {
	height: 0px; opacity: 0px;
	pointer-events: none;
	transition: height 1.1s, opacity 1.1s;
}
#burger.display #burger_menu {
	display: initial;
	height: auto; opacity: 1.0;
	pointer-events: auto;
}*/

#burger.display {
	background: var(--toolbar-glass-color);
}
/* slight move-out dehover guard. https://9elements.github.io/fancy-border-radius/ */
#burger:before {
	transition: left 0s ease-in, top 0s ease-in;
	visibility: hidden;
	position: absolute; left: -200px; right: 100%; top: 0px; bottom: 0px;
	content: "";
	background: transparent; xvar(--toolbar-glass-color);
	border-radius: 100% 0% 0% 100% / 98% 50% 50% 2%;
	z-index: 999;
}
#burger.display:before {
	transition: left 3s ease-in, top 3s ease-in;
	visibility: visible;
	left: -30px;
	top: 50%;
	xborder-top: 1px solid var(--toolbar-glass-color);
}
#burger.display #burger_menu {
	display: initial;
}
#burger.display #burger_menu:before { 
	position: absolute; left: -10px; right: 0px; top: -10px; bottom: -10px;
	content: "";
	xz-index: -1;
	xbackground: red;var(--toolbar-glass-color);
	xborder-top: 1px solid var(--toolbar-glass-color);
	border-radius: 100% 0% 100% 0% / 5% 100% 0% 95%;
}

#burger_menu > table {
	text-align: inherit; 
	border-collapse: collapse; 
	xtable-layout: fixed;
	white-space: nowrap;
}
#burger_menu > table .burger_menu_top_row {
	border-bottom: 1px solid var(--toolbar-glass-color); 
	font-size: 1.3em; 
}
#burger_filelist {
	position: relative;
	padding: 2px 0px 2px 0px;
	height: auto;
	max-height: 0px; 
	max-width: 90vw;
	overflow-x: hidden;
	color: inherit;
	transition: max-height 0.15s ease-in;	/* doesn't seem to work */
}
#burger.display #burger_filelist {
	max-height: calc(90vh - 4em); 
}
.burger_menuitem
{
	padding: 4px var(--toolbar-padding) 4px var(--toolbar-padding);
	clear: both;
	position: relative;
}
.burger_menuitem_user
{
	border-top: 0.5px solid var(--toolbar-glass-color);
}
.burger_menuitem:hover
{
	background: var(--toolbar-glass-color);
}
.burger_menuitem:active
{
	background: var(--toolbar-glass-color);
}	
.burger_menuitem[data-filename]
{
	xtext-align: left;
	padding-left: 4px;
}
.burger_menuitem[data-filename]:before
{
	content: '\2713';
	color: transparent;
}
#burger_filelist .burger_menuitem[data-filename]:before
{
	float: left;
}

#burger_filelist .burger_menuitem[data-filename][data-dirty="true"]
{
	xtext-shadow: 0px 0px 5px green;
	xanimation: hh-green-devil 0.5s ease-in-out infinite running alternate;
	padding-right: 3em;
}
.burger_menuitem[data-filename][data-checked="true"]:before
{
	color: inherit;
}
.burger_menuitem[data-filename][data-checked="wait"]:before
{
	color: inherit;
	content: '… ';
}
body .burger_menuitem[data-filename][data-dirty="true"]:not([data-checked="true"]):before
{
	/* I'm bored with the dirty diamond */
	xcontent: "\25C6 "; /* CR color bug here */
 	xcolor: inherit;
 	color: transparent;
}
/*#burger_filelist .burger_menuitem[data-filename] 
{
	position: relative;
}*/
.burger_menuitem[data-filename] .burger_menuitem_save {
	visibility: hidden;
	position: absolute; right: 8px; top: calc(50%-0.5em);
}
.burger_menuitem[data-filename] img.burger_menuitem_save {
	pointer-events: auto;
	cursor: pointer;
	filter: var(--darkfilter) drop-shadow(0px 0px 4px var(--blue));
	z-index: 1;
}
#burger_filelist .burger_menuitem[data-filename] > A {
	text-decoration: none;
	color: inherit;
	cursor: inherit;
}
#burger_filelist .burger_menuitem[data-filename] > A.rename_file {
	outline: 1px solid var(--text-color);
	padding: 2px;
	margin: -2px;
	background:var(--background-color);
	cursor: text;
}

#burger_filelist .burger_menuitem[data-filename] .burger_menuitem_icon.leftpadding {
	padding-left: 8px;
}
#burger_filelist .burger_menuitem[data-filename].burger_sticky .burger_menuitem_icon {
	xfloat: right;
}

/*#burger_filelist .burger_menuitem[data-filename^="$"] .burger_menuitem_icon,
#burger_filelist .burger_menuitem[data-filename="-"] .burger_menuitem_icon {
	visibility: initial;
	display: initial;
}*/
#burger_filelist .burger_menuitem[data-filename] .burger_menuitem_icon {
	vertical-align: middle; width: 1.2em;
}

.burger_menuitem[data-filename][data-dirty="true"][data-checked="true"]
{
	xfont-weight: bold;
}
.burger_menuitem[data-filename][data-dirty="file"][data-checked="true"] > A
{
	font-weight: bold;
}
.burger_menuitem[data-filename][data-dirty="true"] .burger_menuitem_save
{
	visibility: visible;
}
/*body .burger_menuitem[data-filename][data-dirty="true"][data-checked="true"]:before
{
	content: '\25C6\2713';
}*/

/*#burger_filelist*/ .burger_menuitem[data-filename][data-checked="true"]
{
	background-color: var(--toolbar-glass-color); 
}

/* Content area */
#contentareatd { 
	position: relative; 
	/*background: linear-gradient(110deg, #fdcd3b 60%, #ffed4b 60%);*/
	}

/* https://stackoverflow.com/questions/16670931/hide-scroll-bar-but-while-still-being-able-to-scroll */
/* This is not really the point. I just want to block scrolling on TOUCH SCREENS. we could make a body class on the first touchstart too */
body.block_scrolling { overflow: hidden; touch-action: none; }

@media (pointer:coarse) {
/* freeze the scrolling (this only needs on touchscreen) when the ants appear. but does touch-action do anything here in the middle of the gesture? */
	body.block_scrolling { overflow-y: hidden; touch-action: none; }

	x#contentarea {
		overflow-y: scroll;
		scrollbar-width: none; /* Firefox */
		-ms-overflow-style: none;  /* Internet Explorer 10+ */
	}
	x#contentarea::-webkit-scrollbar { /* WebKit */
		width: 0;
		height: 0;
	}
}

#contentarea { 	
	position: relative;
	word-wrap: break-word;
	xoverflow-y: scroll; 
	-webkit-tap-highlight-color: transparent;	/* don't color page blue on tap in android browser */
}
#contentarea * { 	
	touch-action: manipulation;	/* no double-click to zoom please */
	touch-action: pan-x pan-y pinch-zoom;	/* no double-click to zoom please */
}
#contentareaants {
	position: absolute;
	
	background: linear-gradient(to right, #ccc 50%, #333 50%), linear-gradient(to right, #ccc 50%, #333 50%), linear-gradient(to bottom, #ccc 50%, #333 50%), linear-gradient(to bottom, #ccc 50%, #333 50%);
	background-size: 8px 1px, 8px 1px, 1px 8px, 1px 8px;
	background-position: 0 0, 0 100%, 0 0, 100% 0;
	background-repeat: repeat-x, repeat-x, repeat-y, repeat-y;
	xanimation: hh-marching-ants 1s ease-in-out infinite running alternate;
	
	xborder: 1.5px dashed var(--text-color);
	pointer-events: none;
	opacity: 0;
	visibility: hidden;
	display: none;
	transition: opacity 0.5s, visibility 0s 0.5s;
}
body[data-hh-tool=type] #contentareaants {
	display: initial;
}
body.show_ants #contentareaants {
	transition: opacity 0.5s, visibility 0s 0s;
	opacity: 0.5;
	visibility: visible;
}
/*body.show_ants #contentarea {
	cursor: default;	
}*/

#contentarea * { -webkit-nbsp-mode: normal; }

#contentareagutter {
	xwidth: 100vw;	/* i'm not sure what this does on screen but it sure messes up printing */
}
#contentareagutter { -webkit-user-select: none; counter-reset: section; }
#contentareagutter > .gutter { position: relative; }
body[data-hh-tool="type"] #contentareagutter > .gutter, body[data-hh-tool="type"] #contentareagutter > .gutter * { touch-action: none; xoutline: 2px solid highlight; }
#contentareagutter > .gutter:not(.spacer):before { position: absolute; left: 0px; top: 0px; color: var(--toolbar-glass-color); background: var(--background-color); counter-increment: section; content: counter(section); font-family: monospace;  }
#contentareagutter > .gutter.selected:before { color: gray;  }
#contentareagutter > .gutter.right:before { left: initial; right: 0px; border: 1px solid var(--toolbar-glass-color); border-radius: 4px; }

#contentareagutter .gutter.left { float: left; clear: left; }
#contentareagutter .gutter.right { float: right; clear: right; }
#contentareagutter .gutter.spacer { width: 0px; overflow: hidden; outline: 1px solid var(--toolbar-glass-color); }

#contentareainner {
	xfont-size: larger;
	xpadding: 3vh 3vw 3vh 3vw;	/* no good, changes when android keyboard comes up */
	padding: 0.5em;	
	padding-bottom: 50vh;
	min-height: 100%; 
	box-sizing: border-box;
	outline: none;	/* ugly */
	-webkit-nbsp-mode: normal;
	x-webkit-nbsp-mode: space;
	line-break: after-white-space;
	x-webkit-user-modify: read-write;
	
}
#contentarea button, 
#contentarea input, 
#contentarea label { 
	cursor: inherit; 
}
#contentarea a[href] {
	color: var(--blue);
}
#contentarea a[href]:visited {
	color: var(--purple);
}

#contentarea button {
	border-radius: 8px;
	border: 1px solid gray;
	background-color: var(--background-color);
	color: var(--text-color);
	xfont-weight: bold;
	xbox-shadow: inset -2px -2px 2px var(--toolbar-glass-color);
}
#contentarea button:active {
	background-color: var(--toolbar-glass-color);
	color: var(--text-color);
}
body[data-hh-tool=user] #contentarea button {
	xbackground-color: var(--toolbar-glass-color);
	xcolor: var(--text-color);
	box-shadow: inset 0px -1px 4px var(--toolbar-glass-color);
}
body[data-hh-tool=user] #contentarea button:active {
	background-color: var(--toolbar-glass-color);
	box-shadow: inset 0px 1px 2px gray;
}

#contentarea { 
	xbox-shadow: 0px 1px 3px var(--toolbar-glass-color); 
}

body[data-hh-tool="user"] #contentarea { 
	cursor: pointer; 
}

body[data-hh-tool="type"] #contentarea {
	/*background-size: 8px 1.5px, 8px 1.5px, 1.5px 8px, 1.5px 8px;
	background-position: 0 0, 0 100%, 0 0, 100% 0;
	background-repeat: repeat-x, repeat-x, repeat-y, repeat-y;
	background-image: linear-gradient(to right, highlight 50%, highlight 50%), linear-gradient(to right, highlight 50%, highlight 50%), linear-gradient(to bottom, highlight 50%, highlight 50%), linear-gradient(to bottom, highlight 50%, highlight 50%);*/
}


/*body:not(.context_menu) #contentareagutter > * { 
	z-index: 8; 
}*/


#contentareagutter > svg, #contentareagutter > .container.window > svg {
	transition: z-index 0s 0.25s;
}
body[data-hh-tool=paint] #contentareapaintoverlay {
	visibility: visible;
	opacity: 0.8; 
	pointer-events: auto;	/* this should, only clicks in the paint area should register, the rest is scrolling normally */
	transition: opacity 0.25s, visibility 0.0s 0.0s;
}
body[data-hh-tool=paint] #contentareagutter > svg, body[data-hh-tool=paint] #contentareagutter > .container.window > svg {
	z-index: 2;
	transition: z-index 0s 0s;
}

#contentarea .field
{
	outline: revert;
	overflow: hidden; 
	border: 1px solid var(--toolbar-glass-color); 
	padding: 2px;  margin: 2px;
	background: var(--background-color);
	border-radius: 2px;
}
body[data-hh-tool=user] #contentarea .field
{
	cursor: text;
	box-shadow: inset 0px 1px 2px var(--toolbar-glass-color);
}
#contentarea table
{
	width: 100%;
	border-collapse: collapse;
	margin: 0px;
}
body[data-hh-tool=user] #contentarea table tr:hover
{
	background: var(--toolbar-glass-color);
}
#contentarea table tr > td:nth-child(1)
{
	width: 100%; 
}
#contentarea table tr > td > button
{
	width: 100%; 
}

/* SVGs don't support :after */
body[data-hh-tool="type"] #contentarea .gutter:not(svg) {
	position: relative;
}

body[data-hh-tool="type"] #contentarea .gutter:not(svg):after { 
	position: absolute; content: ""; top: 0px; bottom: 0px; left: 0px; right: 0px; 
	pointer-events: none;
} 
body[data-hh-tool="type"] #contentarea .gutter.selected:not(svg):not(img) { 
	--whole: transparent;
}
body[data-hh-tool="type"] #contentarea img.gutter.selected { 
	--whole: highlight;
}
body.show_backdrop[data-hh-tool="type"] #contentarea .gutter.selected:not(svg) { 
	--whole: highlight;
}

body[data-hh-tool="type"] #contentareagutter > .gutter:not(div) {
	cursor: crosshair;
	pointer-events: none;
}
body[data-hh-tool="type"] #contentareagutter > .gutter.selected:not(svg):not(div) {
	cursor: default;
	pointer-events: auto;
	
}

body[data-hh-tool="type"] #contentarea .gutter.selected:not(svg):not(img):after,
body[data-hh-tool="type"] #contentarea img.gutter.selected  
 { 
	background: linear-gradient(to right, #ccc 50%, #333 50%), linear-gradient(to right, #ccc 50%, #333 50%), linear-gradient(to bottom, #ccc 50%, #333 50%), linear-gradient(to bottom, #ccc 50%, #333 50%)/*, var(--whole)*/;
	background-size: 8px 1px, 8px 1px, 1px 8px, 1px 8px;
	background-position: 0 0, 0 100%, 0 0, 100% 0;
	background-repeat: repeat-x, repeat-x, repeat-y, repeat-y;
	xanimation: hh-marching-ants 1s ease-in-out infinite running alternate;
	animation: hh-marching-ants 1.5s ease;
} 

@keyframes hh-marching-ants
{
	0% { background-position: 0 0, 0 100%, 0 0, 100% 0; }
	30% { background-position: 20px 0, -20px 100%, 0 -20px, 100% 20px; }
	80% { background-position: -30px 0, 30px 100%, 0 30px, 100% -30px; }
	100% { background-position: 0 0, 0 100%, 0 0, 100% 0; }
}

/* SVG */
#contentarea svg
{
	position: relative;
	stroke: var(--text-color); 
	fill: none; 
	vector-effect: non-scaling-stroke;
	stroke-width: 2px; 
	stroke-linejoin: round;
	stroke-linecap: round;
	background: transparent;
	border-color: transparent;
	overflow: visible;
	shape-margin: 0.5em;
	margin: 0 0 0.5em 0.5em;
	xpointer-events: none;
	xoutline: thin dotted gray;
} 
body.context_menu #contentarea svg {
	pointer-events: auto;
	z-index: 2;
}
#contentarea svg.right
{
	float: right;
	max-width: 100%;	/* this is worth experimenting with as a secondary sizing characteristic */
	height: auto;
	padding: 0px;
}
body[data-hh-tool="type"] #contentarea svg.gutter
{
	xoutline: thin dotted gray;
}
body[data-hh-tool="paint"] #contentareagutter svg.gutter
{
	pointer-events: none;
}

body[data-hh-tool="type"] #contentarea svg.gutter:hover
{
	/*background: #F8F8F8;
	border-left: 1px dotted var(--toolbar-glass-color);
	margin-left: -1px;
	transition: border-color 0.25s*/
}

body[data-hh-tool=type] #contentarea .gutter:not(svg):hover,
body[data-hh-tool=type] #contentarea *:not(label.gutter) img:hover
{
	outline: thin dotted gray;
	/* this doesn't reach the gutter floats */
}

#contentarea path.pen
{
	stroke-width: 1.5px;
}
#contentarea path.bulge
{
	stroke-width: 5px;
}


#contentarea svg.red, #contentarea svg *.red { stroke: var(--red); }
#contentarea svg.orange, #contentarea svg *.orange  { stroke: var(--orange); }
#contentarea svg.yellow, #contentarea svg *.yellow  { stroke: var(--yellow); }
#contentarea svg.green, #contentarea svg *.green  { stroke: var(--green); }
#contentarea svg.blue, #contentarea svg *.blue  { stroke: var(--blue); }
#contentarea svg.purple, #contentarea svg *.purple  { stroke: var(--purple); }
#contentarea svg.gray, #contentarea svg *.gray  { stroke: gray; }
.red { color: var(--red); }
.orange { color: var(--orange); }
.yellow { color: var(--yellow); }
.green { color: var(--green); }
.blue { color: var(--blue); }
.purple { color: var(--purple); }
.gray { color: gray; }
@keyframes hh-dashoffset
{
	/* this really eats power on safari */
	0% { stroke-dashoffset: 0px; }
	100% { stroke-dashoffset: 40px; }
}

body[data-hh-tool="type"] #contentarea svg.gutter path.selected
{
	stroke-dasharray: 4px;
	stroke-dashoffset: 40px;
	/* the animation is so power hungry there must be a nicer way */
	/* found it, just march for a moment then come to rest */
	animation: hh-dashoffset 1s ease-in-out /*infinite*/ running alternate;
}

body[data-hh-tool="type"] #contentarea svg.gutter.selected
{
	xbackground: highlight;
	/*stroke-dasharray: 4px;
	stroke-dashoffset: 40px;
	xstroke-width: 1;
	//stroke:highlight;//var(--text-color); 
	xanimation: hh-dashoffset 1s ease-in-out infinite running alternate;
	xfilter: drop-shadow(0px 0px 8px highlight);
	xbackground: highlight;*/
	
/*
	background: linear-gradient(to right, #ccc 50%, #333 50%), linear-gradient(to right, #ccc 50%, #333 50%), linear-gradient(to bottom, #ccc 50%, #333 50%), linear-gradient(to bottom, #ccc 50%, #333 50%);
	background-size: 8px 1px, 8px 1px, 1px 8px, 1px 8px, 100% 100%;
	background-position: 0 0, 0 100%, 0 0, 100% 0, 0 0;
	background-repeat: repeat-x, repeat-x, repeat-y, repeat-y, no-repeat;
	animation: hh-marching-ants 1s ease-in-out infinite running alternate, hh-dashoffset 1s ease-in-out infinite running alternate;
*/
}

.burger_menuitem
{
	xanimation: welcomedialog 1s;	/* need to peg this to state changes only because it looks awful otherwise */
	
}

.container.window  { 
	--titlebar-height: 0px;
	display: table-cell;
	padding: 0.25em;
	padding-top: calc(var(--titlebar-height) + 0.25em);
	border-radius: 0.25em; /* has no effect on table cell */
	box-sizing: border-box;
	min-width: 30%;
	max-width: 100%;
	margin: 0.5em;
	position: relative; 
	border: 1px solid var(--toolbar-glass-color);
	background-color: var(--toolbar-color);
	border-radius: 0.25em;
	box-shadow: 1px 1px 3px var(--toolbar-glass-color);
	xoverflow: scroll;	/* have an inner scroll if you want that */
	animation: welcomedialog 0.15s ease-out;	/* need to peg this to state changes only */
	}
/*body[data-hh-tool="type"] .container.window, body[data-hh-tool="paint"] .container.window {
box-shadow: none;
}*/
.container.dialog  { 
	animation: welcomedialog 0.25s;	/* need to peg this to state changes only */
}

@keyframes welcomewindow {
	0% {
		transform-origin: center;
		transform: scale(0);
		opacity: 0;
	}
	100% {
		transform-origin: center;
		transform: scale(1);
		opacity: 1;
	}
}

@keyframes welcomedialog {
	0% {
		transform-origin: center;
		transform: scale(1.05);
		opacity: 0.5;
	}
	100% {
		transform-origin: center;
		transform: scale(1);
		opacity: 1;
	}
}

.container.window[data-hh-title]  { 
	--titlebar-height: 16px;
}
.container.window[data-hh-title]:before  { 
	position: absolute; left: 0px; right: 0px; top: 0px; height: 16px;
	background-color: var(--toolbar-glass-color);
	border-bottom: 1px solid var(--toolbar-glass-color);
	content: attr(data-hh-title);
	text-shadow: 1px 1px 0px white;
	padding: 1px 1px 1px 5px;
	font: caption;
	text-align: center;
	overflow: hidden;
	opacity: 0.9;
}
/*.container.window:after  { 
	position: absolute; width: 1em; right: 0px; bottom: 0px; height: 1em;
	border-left: 1px solid var(--toolbar-glass-color);
	border-top: 1px solid var(--toolbar-glass-color);
	content: " ";
	font:caption;
	xpointer-events: none;
}*/
.container.window .onClickCloseThisWindow { 
	position: absolute;
	top: -3px;
	right: -3px;
	xborder-radius: 2px; 
	cursor: default;
	font-weight: bold; 
	}
.container.window .onClickCloseThisWindow:after { 
	content: "\002715";
	font-weight: bold; 
	color: var(--text-color); 
}
body:not([data-hh-tool=user]) #contentarea .container.window .onClickCloseThisWindow:after { 
	color: var(--toolbar-glass-color); 
}

/*body[data-hh-tool=user] .container.window:before,
body[data-hh-tool=user] .container.window .onClickCloseThisWindow { 
	background-color: var(--toolbar-glass-color);
}
body[data-hh-tool=user] .container.window .onClickCloseThisWindow:after { 
	color: var(--text-color);
}*/
button::selection {
	background: highlight;
}
label[data-image] {
	shape-margin: 0.5em;
	transition: shape-outside 0.25s;
}
label img {
	max-width: 100%;
}
label {
	display: inline-block;
	position: relative;
}
label[data-youtube] {
	display: inline-block;
	position: relative;
}

	
	
	#modal { text-align: initial; }
	#modal #backdrop { 
		height: 100vh;
		position: fixed;
		z-index: 998; 
		opacity: 0.75; 
		background: var(--background-color); 
		transition: opacity 0.15s; 
		pointer-events: auto;
	}
	#modal #frontdrop {
		display: inline-block; xborder: thin solid red;
		position: fixed; z-index: 999;
		left: 50%; top: 1px;
		transform: translate(-50%, 0%); 
		transition: top 0.2s; 
	}
	#modal #frontdrop.rightside {
		left: initial; right: 1vw; top: 25px;
		transform: none; 
		transition: none; 
	}
	#modal #dialog { 
		box-shadow: 0px 2px 8px gray; 
		font-family: sans-serif; font-size: smaller; xfont-size: min(1.5em, 3vh);
		font-weight: bold;
		min-width: 280px; max-width: 99vw;
		transition: transform 0.25s, opacity 0.25s, visibility 0s 0.0s, top 0.25s; 
		transform: scale(1.0);
		transform-origin: center;
		opacity: 1.0; 
		display: flex;
		flex-direction: column;
		padding: 0px; 
		max-height: calc(100vh - 1em); 	/* changes by viewport resize */
		}
	#modaliframe {
		display:none; 
		flex: 1; 
		border: none; 
		height: 360px; 
		width: auto;
	}
	#modaliframebuttons {
		float: right; text-align:right; 
	}
	#modal #dialog #modaltext {
		flex: 1; 
		xborder: thin dotted gray; 
		background: var(--background-color); 
		padding: 0.5em; padding-bottom: 1em; 
		overflow: auto; 
		white-space: pre-wrap; 
		xmin-height: 30vh; xheight: auto; 
		xmax-height: calc(100vh - 310px); 
	}
	#modal #dialog #modaltext { xmax-height: calc(100vh - 300px); } /* don't eclipse keyboard. edit: this is pointless unless we bring the dialog box to fit the window more tightly on a keyboard phone*/
	
	#modal.hide { transition: visibility 0s 0.15s; visibility: hidden; pointer-events: none; }
	#modal #backdrop.hide { opacity: 0.0; pointer-events: none; }
	#modal.hide #dialog { 
		transition: transform 0.25s, opacity 0.25s, visibility 0s 0.20s; 
		opacity: 0.0; transform: scale(1.05); }
	